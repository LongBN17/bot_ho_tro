from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
import json
import os
from dotenv import load_dotenv

# Load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()

# Load d·ªØ li·ªáu ƒë√£ chu·∫©n h√≥a
with open("data.json", "r", encoding="utf-8") as f:
    data = json.load(f)

# H√†m t√¨m ki·∫øm
def search_data(query):
    query = query.lower()
    return [item for item in data if query in json.dumps(item, ensure_ascii=False).lower()]

# H√†m x·ª≠ l√Ω message
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None or update.message.text is None:
        return

    query = update.message.text
    results = search_data(query)

    if not results:
        await update.message.reply_text("‚ùå Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p.")
        return

    response_parts = []

    for item in results:
        loai = item.get("Lo·∫°i", "").capitalize()
        module = item.get("Module", "")
        mo_ta = item.get("M√¥ T·∫£", "")
        version = item.get("Version", "")
        ten = item.get("T√™n", "")
        giai_phap = item.get("Gi·∫£i Ph√°p", "")

        if loai == "Issue":
            part = (
                f"[{version}] {module}\n"
                f"‚ùó Issue: {ten}\n"
                f"üìå Nguy√™n nh√¢n: {mo_ta}\n"
                f"‚úÖ Gi·∫£i ph√°p: {giai_phap}"
            )
            response_parts.append(part)

        elif loai == "Note":
            # Note kh√¥ng c√≥ t√™n, l·∫•y module l√†m ti√™u ƒë·ªÅ, m√¥ t·∫£ l√†m n·ªôi dung
            part = f"üìù {module}:\n{mo_ta}"
            response_parts.append(part)

        elif loai == "Logic":
            # Logic c≈©ng kh√¥ng c√≥ t√™n, ch·ªâ module + m√¥ t·∫£
            # M√¥ t·∫£ c√≥ th·ªÉ ch·ª©a nhi·ªÅu ph·∫ßn, t√°ch theo d·∫•u ";" cho d·ªÖ ƒë·ªçc
            part = f"‚öôÔ∏è {module}:\n"
            for line in mo_ta.split(";"):
                line = line.strip()
                if line:
                    part += f" - {line}\n"
            response_parts.append(part.strip())

        else:
            continue  # B·ªè qua lo·∫°i kh√°c

    # Gh√©p c√°c ph·∫ßn, ng·∫Øt b·∫±ng "---"
    full_response = "\n\n---\n\n".join(response_parts)

    # Telegram gi·ªõi h·∫°n 4096 k√Ω t·ª± cho 1 tin nh·∫Øn
    max_len = 4000
    if len(full_response) <= max_len:
        await update.message.reply_text(full_response)
    else:
        # C·∫Øt theo ƒëo·∫°n (---) ƒë·ªÉ g·ª≠i t·ª´ng ph·∫ßn
        parts = full_response.split("\n\n---\n\n")
        buffer = ""
        for part in parts:
            if len(buffer) + len(part) + 5 < max_len:
                buffer += part + "\n\n---\n\n"
            else:
                await update.message.reply_text(buffer.strip())
                buffer = part + "\n\n---\n\n"
        if buffer.strip():
            await update.message.reply_text(buffer.strip())

# Kh·ªüi ch·∫°y bot
if __name__ == '__main__':
    TOKEN = os.environ.get("BOT_TOKEN")
    if not TOKEN:
        print("‚ùå ERROR: BOT_TOKEN ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p trong bi·∫øn m√¥i tr∆∞·ªùng!")
        exit(1)

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("ü§ñ Bot is running...")
    app.run_polling()
